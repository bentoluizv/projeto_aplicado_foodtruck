services:
  traefik:
    image: traefik:v3.4.1
    command:
      # - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - default_network

  backend:
    image: bentoluizv/projeto_aplicado:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`89.117.33.177`)"
      - "traefik.http.routers.backend.entrypoints=web"
    env_file:
      - .env
    networks:
      - default_network
    healthcheck:
      test: curl http://localhost:8000/docs || exit 1
      interval: 20s
      timeout: 1s
      retries: 3
    depends_on:
      db-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  db-init:
    image: bentoluizv/projeto_aplicado:latest
    command: python -m projeto_aplicado.scripts.init_db
    env_file:
      - .env
    networks:
      - default_network
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:16
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres
      interval: 30s
      timeout: 2s
      retries: 5
    networks:
      - default_network

  redis:
    image: redis:7.4.2
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: redis-cli ping
      interval: 30s
      timeout: 2s
      retries: 5
    networks:
      - default_network

volumes:
  postgres_data:
  redis_data:

networks:
  default_network:
